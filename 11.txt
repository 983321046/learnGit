git is a version control system.
git is free software
mkdir pp 创建目录 pp
cd pp 显示pp下的文件
pwd 展开路径
git init 创建git 仓库
git config --global user.name "用户名"
git congfig --global user.email "邮箱地址"
git add 文件
git commit -m "本次上传说明"
git status 监听文件夹状态
git diff 文件名  //查看区别

git reset --hard  HEAD版本号开头几位  指定回到某版本
git reset --hard HEAD^ 返回上个版本
cat 文件名  查看详细内容
git reflog 查看回档记录
git log 查看更新历史记录




测试区别（工作区[本地]、缓存区、版本分支）
git diff --cached 暂存区与版本分支的区别
git diff HEAD --文件名 工作区和版本分支的区别


git checkout --file  还原（版本还原，暂存区还原）
git reset HEAD file 清除文件的暂存
rm file 删除文件（工作区[本地] ）
git rm file 删除文件(删除暂存区并自动删除工作区[本地]的文件，如果想一并删除版本中的文件 需要重新 git commit -m)


git remote add 库名 git@github.com:用户名/远程库.git  建立与远程库的连接 
git push -u 库名 master 初次提交绑定库
git push 库名 master 后续提交

git clone git@github.com:用户名/远程库.git 克隆远程库到本地


//分支
git branch //查看分支
git branch 名称  创建分支
git checkout 名称 切换分支
git checkout -b 名称  创建并切换分支
git merge 分支  合并分支到master
git branch -d 名称  删除分支
git log --graph 分支合并图
git merge --no-ff -m "备注" 分支  由于使用--no-off时候会创建新的commit 所以添加备注  --no-off 普通合并模式（可以查看合并的操作者）不添加为 快速合并模式（不能查看谁操作的合并）